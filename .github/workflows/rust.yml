name: Rust

on:
  workflow_dispatch:
  push:
    branches: [ "main" ]
  pull_request:

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 2
        submodules: true
    - name: Install stable rust toolchain
      uses: dtolnay/rust-toolchain@1.90
      with:
        components: rustfmt, clippy
    - name: Install nightly rust toolchain
      uses: dtolnay/rust-toolchain@nightly
      with:
        components: rustfmt
    - name: Install nextest
      uses: taiki-e/install-action@nextest
    - name: Install just
      uses: taiki-e/install-action@just
    - name: Install taplo
      uses: taiki-e/install-action@taplo
    - name: Set up cargo cache
      uses: Swatinem/rust-cache@v2
      if: github.ref != 'refs/heads/main'
      with:
        prefix-key: "rust"
    - name: Install linux dependencies
      if: runner.os == 'Linux'
      run: sudo apt update && sudo apt install build-essential libssl-dev pkg-config libglib2.0-dev libgtk-3-dev libudev-dev
    - name: Lint
      run: just c
    - name: Format
      run: just f
    - name: Run Linux tests
      if: runner.os == 'Linux'
      run: |
        export RUSTFLAGS="-Cinstrument-coverage"
        export LLVM_PROFILE_FILE='cargo-test-%p-%m.profraw'
        just t
    - name: Run MacOS and Windows tests
      if: runner.os != 'Linux'
      run: just t
    - name: Run doctests
      run: cargo test --workspace --doc --features all
    - name: Build all --features
      run: just ba
    - name: Run coverage
      if: runner.os == 'Linux'
      run: |
        rustup component add llvm-tools-preview
        curl -L https://github.com/mozilla/grcov/releases/latest/download/grcov-x86_64-unknown-linux-gnu.tar.bz2 | tar jxf -
        ./grcov . --binary-path ./target/debug/deps -s . -t lcov --branch --ignore-not-existing --ignore "../*" --ignore "/*" -o cov.lcov
    - uses: codecov/codecov-action@v5
      if: runner.os == 'Linux'
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
